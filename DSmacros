Sub ImportSASIntoPupilDS()Dim WorkbookNameSAS, WorkbookNamePupil As StringDim DSID_Column, DSTime_Column, DSLastRow, DSLastColumn, DS_TrialNumCol, DS_PFCol, DS_NumCorrCol, DS_DigPossCol, DS_GoodBadCol As StringDim SASID_Column, SASLastRow, SASDS_FirstDataColumn, SASDS_LastDataColumn, SASDS_Data(1 To 48) As StringDim MatchingID As StringDim MatchingTime, MatchingTimeHour, MatchingTimeMinute, MatchingTimeSecond As StringDim MatchID_SASRow As StringDim TrialNumber, DigitsPossible, PassFailValue, NumberCorrectValue, GoodBadValue As StringDim x As Integer'Open the SAS text fileOpenFile "Open VETSA SAS text file", "txt"WorkbookNameSAS = ActiveWorkbook.Name'Find/assign important SAS columnsRows("1:1").SelectSASID_Column = GetColumnLetter("vetsaid")GotoColumn ("DST1TIM")SASDS_FirstDataColumn = Mid(ActiveCell.Address, InStr(ActiveCell.Address, "$") + 1, InStr(2, ActiveCell.Address, "$") - 2)  'Find/assign last populated rowRange("C1").SelectSelection.End(xlDown).ActivateSASLastRow = ActiveCell.Row    'Open the Pupilometer Excel fileOpenFile "Open Pupilometer Excel file", "xls*"WorkbookNamePupil = ActiveWorkbook.Name'Activate the PLR tabSheets("Digit Span").Activate'Find/assign important columnsRows("1:1").SelectDSID_Column = GetColumnLetter("Subject ID")DSTime_Column = GetColumnLetter("Time")DS_TrialNumCol = GetColumnLetter("Trial Number")DS_PFCol = GetColumnLetter("Pass / Fail?")DS_NumCorrCol = GetColumnLetter("# Correct")DS_DigPossCol = GetColumnLetter("Digits Possible")DS_GoodBadCol = GetColumnLetter("Good Trial?")'Find/assign last populated rowRange("A1").SelectSelection.End(xlDown).ActivateDSLastRow = ActiveCell.Row'Find/assign last populated columnRange("A1").SelectSelection.End(xlToRight).ActivateDSLastColumn = Mid(ActiveCell.Address, InStr(ActiveCell.Address, "$") + 1, InStr(2, ActiveCell.Address, "$") - 2)'Sort by ID and TimeActiveWorkbook.Worksheets("Digit Span").Sort.SortFields.ClearCells.Select    ActiveWorkbook.Worksheets("Digit Span").Sort.SortFields.Add Key:=Range(DSID_Column & "2:" & DSID_Column & DSLastRow), _        SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal    ActiveWorkbook.Worksheets("Digit Span").Sort.SortFields.Add Key:=Range(DSTime_Column & "2:" & DSTime_Column & DSLastRow), _        SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal   With ActiveWorkbook.Worksheets("Digit Span").Sort        .SetRange Range("A1:" & DSLastColumn & DSLastRow)        .Header = xlYes        .MatchCase = False        .Orientation = xlTopToBottom        .SortMethod = xlPinYin        .Apply    End With    ActiveWorkbook.Worksheets("Digit Span").Sort.SortFields.Clear    '''''''''''''''''''''''''''''''Variable Assignment Complete'''''''''''''''''''''''''''''''pupilrow = 2Do'Assign Pupil subject to look forWindows(WorkbookNamePupil).ActivateSheets("Digit Span").ActivateMatchingID = Range(DSID_Column & pupilrow).Value'Look for this subject in SASWindows(WorkbookNameSAS).ActivateMatchID_SASRow = "Subject not in SAS"For x = 2 To SASLastRow    'If subject is found, grab all of their data    If StrComp(Range(SASID_Column & x).Value, MatchingID, 1) = 0 Then                        MatchID_SASRow = x        Range(SASDS_FirstDataColumn & MatchID_SASRow).Activate            For y = 1 To 48                SASDS_Data(y) = ActiveCell.Value                ActiveCell.Offset(0, 1).Activate            Next y        Exit For    End IfNext x'If subject is not found, populate error code for all subject's rows.If MatchID_SASRow = "Subject not in SAS" Then    Windows(WorkbookNamePupil).Activate    Sheets("Digit Span").Activate       Do    If IsEmpty(ActiveCell.Value) Then        Exit Do    End If        If ActiveCell.Value = MatchingID Then        Range(DS_GoodBadCol & pupilrow) = "Subject not in SAS"        pupilrow = pupilrow + 1        Range("A" & pupilrow).Activate    Else        Exit Do    End If    Loop    'If subect is found, try to find a match all of their times within the SAS PLR Time variablesElseWindows(WorkbookNamePupil).ActivateSheets("Digit Span").ActivateRange("A" & pupilrow).ActivateDo    If IsEmpty(ActiveCell.Value) Then        Exit Do    End If    'Time must be formatted to match SAS time    MatchingTimeHour = Hour(Range(DSTime_Column & pupilrow).Value)    MatchingTimeMinute = Minute(Range(DSTime_Column & pupilrow).Value)    If MatchingTimeMinute < 10 Then MatchingTimeMinute = "0" & MatchingTimeMinute    MatchingTimeSecond = Second(Range(DSTime_Column & pupilrow).Value)    If MatchingTimeSecond < 10 Then MatchingTimeSecond = "0" & MatchingTimeSecond    MatchingTime = MatchingTimeHour & MatchingTimeMinute & MatchingTimeSecond    TrialNumber = ""    DigitsPossible = ""    PassFailValue = ""    NumberCorrectValue = ""    GoodBadValue = "No Match Found"    For x = 1 To 12       If StrComp(SASDS_Data(x), MatchingTime, 1) = 0 Then            'Grab corresponding data values.            TrialNumber = x            DigitsPossible = getSpanLength(x)            PassFailValue = SASDS_Data(x + 12)            NumberCorrectValue = SASDS_Data(x + 24)            GoodBadValue = SASDS_Data(x + 36)            Exit For        End If    Next x    'Paste good/bad data from into appropriate columns    Range(DS_TrialNumCol & pupilrow) = TrialNumber    Range(DS_PFCol & pupilrow) = PassFailValue    Range(DS_NumCorrCol & pupilrow) = NumberCorrectValue    Range(DS_DigPossCol & pupilrow) = DigitsPossible    Range(DS_GoodBadCol & pupilrow) = GoodBadValue    If ActiveCell.Value = MatchingID Then        pupilrow = pupilrow + 1        Range("A" & pupilrow).Activate    Else        Exit Do    End IfLoopEnd IfLoop Until IsEmpty(ActiveCell.Value)'EndRange("A1").SelectEnd SubFunction getSpanLength(TrialNumber As Integer)If TrialNumber = 1 Then getSpanLength = "3"If TrialNumber = 2 Then getSpanLength = "3"If TrialNumber = 3 Then getSpanLength = "3"If TrialNumber = 4 Then getSpanLength = "3"If TrialNumber = 5 Then getSpanLength = "6"If TrialNumber = 6 Then getSpanLength = "6"If TrialNumber = 7 Then getSpanLength = "6"If TrialNumber = 8 Then getSpanLength = "6"If TrialNumber = 9 Then getSpanLength = "9"If TrialNumber = 10 Then getSpanLength = "9"If TrialNumber = 11 Then getSpanLength = "9"If TrialNumber = 12 Then getSpanLength = "9"End FunctionSub AverageTimeToTheSecond()Dim StartFillAddress, EndFillAddress As String'Go to beginning of pupil data'Rows("1:1").Select'GotoColumn ("0")'Find Last Row'Selection.End(xlDown).Activate'EndFillAddress = ActiveCell.Address'Go back to pupil dataRows("1:1").SelectGotoColumn ("0")ActiveCell.Offset(1, 0).ActivateStartFillAddress = ActiveCell.Address'Find Last RowSelection.End(xlDown).ActivateEndFillAddress = ActiveCell.Address'Average 1 second's worth of data togetherRange(StartFillAddress).SelectColumns(ActiveCell.Column).Insert Shift:=xlToRightActiveCell.FormulaR1C1 = "=AVERAGE(RC[1]:RC[5])"Selection.AutoFill Destination:=Range(StartFillAddress & ":" & EndFillAddress), Type:=xlFillDefault'Copy and repaste as values (instead of =Average formulaRange(StartFillAddress & ":" & EndFillAddress).Select    Selection.Copy    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _        :=False, Transpose:=FalseActiveCell.Offset(-1, 0) = "Baseline Diameter"'Calculate Initial Pupil-Diameter'Columns(ActiveCell.Column).Insert Shift:=xlToRight'ActiveCell = "Baseline Diameter"'ActiveCell.Offset(1, 0).Activate'StartFillAddress = ActiveCell.Address'ActiveCell.FormulaR1C1 = "=AVERAGE(RC[1]:RC[5])"'Selection.AutoFill Destination:=Range(StartFillAddress & ":" & EndFillAddress), Type:=xlFillDefault'Copy and repaste as values (instead of =Average formula'Range(StartFillAddress & ":" & EndFillAddress).Select'    Selection.Copy'    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _'        :=False, Transpose:=False'Go back to beginning of pupil dataRows("1:1").SelectGotoColumn ("0")ActiveCell.Offset(1, 0).ActivateDoStartFillAddress = ActiveCell.Address'Find Last RowSelection.End(xlDown).ActivateEndFillAddress = ActiveCell.Address'Average 1 second's worth of data togetherRange(StartFillAddress).SelectColumns(ActiveCell.Column).Insert Shift:=xlToRightActiveCell.FormulaR1C1 = "=AVERAGE(RC[1]:RC[30])"Selection.AutoFill Destination:=Range(StartFillAddress & ":" & EndFillAddress), Type:=xlFillDefault'Copy and repaste as values (instead of =Average formulaRange(StartFillAddress & ":" & EndFillAddress).Select    Selection.Copy    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _        :=False, Transpose:=FalseActiveCell.Offset(-1, 0) = "DSWF" & ActiveCell.Offset(-1, 1).Value & "-" & (ActiveCell.Offset(-1, 1).Value + 1)Range(Columns(ActiveCell.Column + 1), Columns(ActiveCell.Column + 30)).Delete Shift:=xlToLeftActiveCell.Offset(0, 1).ActivateLoop Until IsEmpty(ActiveCell.Value)End SubSub CalculateDS_PCA()Dim DS_DigPossCol, DS_DiamInitCol, DS_DiamEndCol, DS_PCACol, DS_3_4Col, DS_6_7Col, DS_9_10Col As StringDim SpanLen As String'Go to beginning of pupil dataRows("1:1").SelectGotoColumn ("DSWF0-1")'Make Column-headers for End Diameter and PCAColumns(ActiveCell.Column).Insert Shift:=xlToRightColumns(ActiveCell.Column).Insert Shift:=xlToRightActiveCell = "Last Digit Amplitude"ActiveCell.Offset(0, 1) = "PCA"'Find/assign important columnsRows("1:1").SelectDS_DigPossCol = GetColumnLetter("Digits Possible")DS_DiamInitCol = GetColumnLetter("Baseline Diameter")DS_DiamEndCol = GetColumnLetter("Last Digit Amplitude")DS_PCACol = GetColumnLetter("PCA")DS_3_4Col = GetColumnLetter("DSWF3-4")'###05MAY2012 - Was using DSWF5-6, need to use DSWF6-7.DS_6_7Col = GetColumnLetter("DSWF6-7")DS_9_10Col = GetColumnLetter("DSWF9-10")pupilrow = 2'Assign the Diameter End based on the Digit Span Length'For 3 digit: DSWF3-4, for 6-digit: DSWF5-6, and for 9-digit: DSWF9-10.Do        SpanLen = Range(DS_DigPossCol & pupilrow).Value                Select Case SpanLen        Case "3"            Range(DS_DiamEndCol & pupilrow) = Range(DS_3_4Col & pupilrow).Value            Range(DS_PCACol & pupilrow) = Range(DS_DiamEndCol & pupilrow).Value - Range(DS_DiamInitCol & pupilrow)        Case "6"            Range(DS_DiamEndCol & pupilrow) = Range(DS_6_7Col & pupilrow).Value            Range(DS_PCACol & pupilrow) = Range(DS_DiamEndCol & pupilrow).Value - Range(DS_DiamInitCol & pupilrow)        Case "9"            Range(DS_DiamEndCol & pupilrow) = Range(DS_9_10Col & pupilrow).Value             Range(DS_PCACol & pupilrow) = Range(DS_DiamEndCol & pupilrow).Value - Range(DS_DiamInitCol & pupilrow)       Case Else            Range(DS_DiamEndCol & pupilrow) = ""        End Select                pupilrow = pupilrow + 1        Range("A" & pupilrow).Activate        Loop Until IsEmpty(ActiveCell.Value)Range("A1").ActivateEnd SubSub RemoveColumns_DS()Rows("1:1").SelectCall RemoveColumn("Pulse Intensity")Call RemoveColumn("DC Intensity")Call RemoveColumn("Record ID")Call RemoveColumn("Pulse Start Time")Call RemoveColumn("Pulse Duration")Call RemoveColumn("Measurement Duration")Range("A1").SelectEnd SubSub CleanDSData()Dim LostSubjects(100) As StringDim LostSubjectReason(100) As StringDim LostSubjectCounter As IntegerDim DisplayString As StringDim LostSubjectFile As StringDim iFileNum As IntegerLostSubjectCounter = 0'''''''''''''''''''''''''''''Remove all non-good trials''''''''''''''''''''''''''''''Find good/bad column, then move to first data rowRows("1:1").SelectGotoColumn ("Good Trial?")ActiveCell.Offset(1, 0).Activate'Remove anything that isn't marked "1"Do    If ActiveCell.Value = 1 Then        ActiveCell.Offset(1, 0).Activate    Else        'If this will delete the subject entirely, record subject ID and reason for deletion.        If Not (ActiveCell.Offset(0, -6).Value = ActiveCell.Offset(-1, -6).Value) And Not (ActiveCell.Offset(0, -6).Value = ActiveCell.Offset(1, -6).Value) Then        'If Not (ActiveCell.Offset(0, -2).Value = ActiveCell.Offset(-1, -2).Value) Then            LostSubjectCounter = LostSubjectCounter + 1            LostSubjects(LostSubjectCounter) = ActiveCell.Offset(0, -6).Value            LostSubjectReason(LostSubjectCounter) = ActiveCell.Value            If LostSubjectReason(LostSubjectCounter) = "0" Then LostSubjectReason(LostSubjectCounter) = "No good trials"        End If                'Actually delete the row, now        Rows(ActiveCell.Row & ":" & ActiveCell.Row).Delete Shift:=xlUp    End IfLoop Until IsEmpty(ActiveCell.Value)'If any subjects were lost, record information in text fileIf LostSubjectCounter > 0 ThenLostSubjectFile = "C:\Users\Minna\Desktop\Pupillometry Consulting\Output Files\LostDSSubjectsRecord.txt"iFileNum = FreeFileOpen LostSubjectFile For Output As iFileNumPrint #iFileNum, "The following subjects were removed completely"Print #iFileNum, ""For i = 1 To LostSubjectCounter'If LostSubjectReason(i) = "0" Then LostSubjectReason(i) = "No good trials"DisplayString = LostSubjects(i) & " - " & LostSubjectReason(i) & vbNewLine & DisplayStringPrint #iFileNum, LostSubjects(i) & " - " & LostSubjectReason(i)Next iClose #iFileNum'LostSubjectFile = "C:\Users\Minna\Desktop\Pupillometry Consulting\Output Files rd2\LostSubjectRecord.txt"'iFileNum = FreeFile'Open LostSubjectFile For Output As iFileNum'Print #iFileNum, DisplayStringMsgBox ("The following subjects were removed completely" & vbNewLine & vbNewLine & DisplayString)End IfEnd SubSub DSCreateDifferences()Dim DSLastRow As String'Find/assign last populated rowRange("A1").SelectSelection.End(xlDown).ActivateDSLastRow = ActiveCell.Row'Go to the first DS waveform column.Rows("1:1").SelectGotoColumn ("DSWF0-1")'Create the difference headersFor i = 0 To 14    ActiveCell.Offset(0, i + 15) = ActiveCell.Offset(0, i).Value & "Diff"Next i'Go to the first data rowActiveCell.Offset(1, 0).Activate'Calculate the difference scores for the first rowFor i = 0 To 14    ActiveCell.Offset(0, i + 15) = "=" & ActiveCell.Offset(0, i).Address(0, 0) & "-$M" & ActiveCell.RowNext i'Autofill the formulae from the first row down to the last populated row.'TODO!!!!!!'End SubSub DSAverageSpansTogether()Dim NewSubject As BooleanDim FirstRow, LastRow, CurrentRow As StringDim FirstCell, LastCell As StringDim NumberOfRows As StringDim FirstColumnToAverage As StringDim LastColumnToAverage As StringDim CellValue As StringDim PasteColumn As String'Find the first and last column that needs averagingRows("1:1").SelectFirstColumnToAverage = GetColumnLetter("Diameter Mean")LastColumnToAverage = GetColumnLetter("DSWF14-15Diff")NewSubject = FalseRange("F2").ActivateDoNumberOfRows = 0'Find first row for particular digit-spanFirstRow = ActiveCell.Row'Find last row for particular digit-spanDoLastRow = ActiveCell.RowNumberOfRows = NumberOfRows + 1'Loop until the subject OR the digits-span value changesActiveCell.Offset(1, 0).ActivateLoop While ActiveCell.Value = ActiveCell.Offset(-1, 0).Value And ActiveCell.Offset(0, -5).Value = ActiveCell.Offset(-1, -5).Value'If multiple rows, average rows together.  Otherwise, skip to next subject.'If Not NumberOfRows = 1 Then    'Create new row to house averaged values    Rows(ActiveCell.Row & ":" & ActiveCell.Row).Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove        'Go to first average-column    Range(FirstColumnToAverage & ActiveCell.Row).Activate    'Set to average of subject's values below    ActiveCell.FormulaR1C1 = "=AVERAGE(R[-1]C:R[-" & NumberOfRows & "]C)"    'Copy this formula into every column that needs averaging    ActiveCell.Copy    Range(FirstColumnToAverage & ActiveCell.Row & ":" & LastColumnToAverage & ActiveCell.Row).Select    ActiveSheet.Paste    Application.CutCopyMode = False    '    'Recopy this row  as values instead of formula.    Range(FirstColumnToAverage & ActiveCell.Row & ":" & LastColumnToAverage & ActiveCell.Row).Copy    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _        :=False, Transpose:=False    Application.CutCopyMode = False    'Copy down the Digits-Possible and the Subject ID values for later    Range("A" & ActiveCell.Row) = Range("A" & ActiveCell.Row).Offset(-1, 0).Value    Range("F" & ActiveCell.Row) = Range("F" & ActiveCell.Row).Offset(-1, 0).Value    'Delete the rows that went into the average    Rows(FirstRow & ":" & LastRow).Delete Shift:=xlUp    'Return to Column F, at the beginning of the next digit-span    Range("F" & FirstRow).Offset(1, 0).Activate'End IfLoop Until IsEmpty(ActiveCell.Value)'Now move the average-values into the appropriate rows, based on digit-span lengthRange("A2").SelectDo'Record first row for particular subjectFirstRow = ActiveCell.RowDoCurrentRow = ActiveCell.Row'Based on the Digits Possible value, move data to appropriate column.If Range("F" & ActiveCell.Row) = 3 Then PasteColumn = "AT"If Range("F" & ActiveCell.Row) = 6 Then PasteColumn = "CC"If Range("F" & ActiveCell.Row) = 9 Then PasteColumn = "DL"Range(FirstColumnToAverage & CurrentRow & ":" & LastColumnToAverage & CurrentRow).Copy    Range(PasteColumn & FirstRow).Select    ActiveSheet.Paste    Application.CutCopyMode = False        'Move back to column A    Range("A" & CurrentRow).Activate'Delete if it's not the first rowIf Not CurrentRow = FirstRow Then    Rows(CurrentRow & ":" & CurrentRow).Delete Shift:=xlUp'If it is the first row, just move down to the next rowElse    ActiveCell.Offset(1, 0).ActivateEnd IfLoop While ActiveCell.Value = ActiveCell.Offset(-1, 0).ValueLoop Until IsEmpty(ActiveCell.Value)End Sub