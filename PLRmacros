Sub ImportSASIntoPupilPLR()Dim WorkbookNameSAS, WorkbookNamePupil As StringDim PLRID_Column, PLRTime_Column, PLRLastRow, PLRLastColumn, PLRInput_Column As StringDim SASID_Column, SASLastRow, SASPLR_TimeColumns(1 To 10), SASPLR_GoodBadColumns(1 To 10) As StringDim MatchingID As StringDim MatchingTime, MatchingTimeHour, MatchingTimeMinute, MatchingTimeSecond As StringDim MatchID_SASRow As StringDim GoodBadValue As StringDim FirstTrial As Boolean'Open the SAS text fileOpenFile "Open VETSA SAS text file", "txt"WorkbookNameSAS = ActiveWorkbook.Name'Find/assign important SAS columnsRows("1:1").SelectSASID_Column = GetColumnLetter("vetsaid")GotoColumn ("LRT1TIM")For x = 1 To 10    'Assign current active-cell's column letter-value to array.    SASPLR_TimeColumns(x) = Mid(ActiveCell.Address, InStr(ActiveCell.Address, "$") + 1, InStr(2, ActiveCell.Address, "$") - 2)         'Move one cell to the right    ActiveCell.Offset(0, 1).ActivateNext x    For x = 1 To 10    'Assign current active-cell's column letter-value to array.    SASPLR_GoodBadColumns(x) = Mid(ActiveCell.Address, InStr(ActiveCell.Address, "$") + 1, InStr(2, ActiveCell.Address, "$") - 2)         'Move one cell to the right    ActiveCell.Offset(0, 1).ActivateNext x    'Find/assign last populated rowRange("C1").SelectSelection.End(xlDown).ActivateSASLastRow = ActiveCell.Row    'Open the Pupilometer Excel fileOpenFile "Open Pupilometer Excel file", "xls*"WorkbookNamePupil = ActiveWorkbook.Name'Activate the PLR tabSheets("PLR").Activate'Find/assign important columnsRows("1:1").SelectPLRID_Column = GetColumnLetter("Subject ID")PLRTime_Column = GetColumnLetter("Time")PLRInput_Column = GetColumnLetter("Good or Bad Scan?")'Find/assign last populated rowRange("A1").SelectSelection.End(xlDown).ActivatePLRLastRow = ActiveCell.Row'Find/assign last populated columnRange("A1").SelectSelection.End(xlToRight).ActivatePLRLastColumn = Mid(ActiveCell.Address, InStr(ActiveCell.Address, "$") + 1, InStr(2, ActiveCell.Address, "$") - 2)'Sort by ID and TimeActiveWorkbook.Worksheets("PLR").Sort.SortFields.ClearCells.Select    ActiveWorkbook.Worksheets("PLR").Sort.SortFields.Add Key:=Range(PLRID_Column & "2:" & PLRID_Column & PLRLastRow), _        SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal    ActiveWorkbook.Worksheets("PLR").Sort.SortFields.Add Key:=Range(PLRTime_Column & "2:" & PLRTime_Column & PLRLastRow), _        SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal   With ActiveWorkbook.Worksheets("PLR").Sort        .SetRange Range("A1:" & PLRLastColumn & PLRLastRow)        .Header = xlYes        .MatchCase = False        .Orientation = xlTopToBottom        .SortMethod = xlPinYin        .Apply    End With    ActiveWorkbook.Worksheets("PLR").Sort.SortFields.Clear    '''''''''''''''''''''''''''''''Variable Assignment Complete'''''''''''''''''''''''''''''''For pupilrow = 2 To PLRLastRow'Reinitialize variablesFirstTrial = False'Assign Pupil subject/time to look forWindows(WorkbookNamePupil).ActivateSheets("PLR").ActivateMatchingID = Range(PLRID_Column & pupilrow).Value'Determine if this is the first trialIf Not (Range(PLRID_Column & pupilrow).Value = Range(PLRID_Column & (pupilrow - 1)).Value) Then FirstTrial = True'Time must be formatted to match SAS timeMatchingTimeHour = Hour(Range(PLRTime_Column & pupilrow).Value)MatchingTimeMinute = Minute(Range(PLRTime_Column & pupilrow).Value)If MatchingTimeMinute < 10 Then MatchingTimeMinute = "0" & MatchingTimeMinuteMatchingTimeSecond = Second(Range(PLRTime_Column & pupilrow).Value)If MatchingTimeSecond < 10 Then MatchingTimeSecond = "0" & MatchingTimeSecondMatchingTime = MatchingTimeHour & MatchingTimeMinute & MatchingTimeSecond'Look for this subject in SASWindows(WorkbookNameSAS).Activate'MatchID_SASRow = Columns(SASID_Column + ":" + SASID_Column).Find(What:=MatchingID, _'    LookAt:=xlWhole).RowMatchID_SASRow = "Subject not in SAS"For x = 2 To SASLastRow    If StrComp(Range(SASID_Column & x).Value, MatchingID, 1) = 0 Then        MatchID_SASRow = x        Exit For    End IfNext x'If subject is not found, populate error code into Pupil ColumnIf MatchID_SASRow = "Subject not in SAS" Then    Windows(WorkbookNamePupil).Activate    Sheets("PLR").Activate    Range(PLRInput_Column & pupilrow) = "Subject not in SAS"'If subect is found, try to find a match for the time within the SAS PLR Time variablesElseGoodBadValue = "No Match Found"For x = 1 To 10      If StrComp(Range(SASPLR_TimeColumns(x) & MatchID_SASRow).Value, MatchingTime, 1) = 0 Then        'Grab corresponding good/bad value.        GoodBadValue = Range(SASPLR_GoodBadColumns(x) & MatchID_SASRow).Value        Exit For    End IfNext x'If first trial and no match found, populate with Practice TrialIf GoodBadValue = "No Match Found" And FirstTrial = True Then GoodBadValue = "Practice Trial"    'Paste good/bad data from into Pupil Column    Windows(WorkbookNamePupil).Activate    Sheets("PLR").Activate    Range(PLRInput_Column & pupilrow) = GoodBadValueEnd IfNext pupilrow'Rename Waveform variablesCall RenameWaveformVarsPLR'Add PCA variableCall CreatePCA'EndRange("A1").SelectEnd SubPublic Sub OpenFile(Message As String, FileType As String)    Dim vFile As Variant    'Showing Excel Open Dialog Form    'vFile = Application.GetOpenFilename("Excel Files (*.txt)," & _    '"*.txt", 1, "Select Excel File", "Open", False)    vFile = Application.GetOpenFilename("Excel Files (*." + FileType + ")," & _    "*." + FileType + "", 1, Message, "Open", False)    'If Cancel then exit    If TypeName(vFile) = "Boolean" Then        Exit Sub    End If    'Open selected file    Workbooks.Open vFileEnd SubSub CleanPLRData()Dim LostSubjects(100) As StringDim LostSubjectReason(100) As StringDim LostSubjectCounter As IntegerDim DisplayString As StringDim LostSubjectFile As StringDim iFileNum As IntegerLostSubjectCounter = 0'''''''''''''''''''''''''''''Remove all non-good trials''''''''''''''''''''''''''''''Find good/bad column, then move to first data rowRows("1:1").SelectGotoColumn ("Good or Bad Scan?")ActiveCell.Offset(1, 0).Activate'Remove anything that isn't marked "1"Do    If ActiveCell.Value = 1 Then        ActiveCell.Offset(1, 0).Activate    Else        'If this will delete the subject entirely, record subject ID and reason for deletion.        If Not (ActiveCell.Offset(0, -2).Value = ActiveCell.Offset(-1, -2).Value) And Not (ActiveCell.Offset(0, -2).Value = ActiveCell.Offset(1, -2).Value) Then        'If Not (ActiveCell.Offset(0, -2).Value = ActiveCell.Offset(-1, -2).Value) Then            LostSubjectCounter = LostSubjectCounter + 1            LostSubjects(LostSubjectCounter) = ActiveCell.Offset(0, -2).Value            LostSubjectReason(LostSubjectCounter) = ActiveCell.Value            If LostSubjectReason(LostSubjectCounter) = "0" Then LostSubjectReason(LostSubjectCounter) = "No good trials - Tester"        End If                'Actually delete the row, now        Rows(ActiveCell.Row & ":" & ActiveCell.Row).Delete Shift:=xlUp    End IfLoop Until IsEmpty(ActiveCell.Value)'''''''''''''''''''''''''''''''Remove all non-normal trials''''''''''''''''''''''''''''''''Find good/bad column, then move to first data rowRows("1:1").SelectGotoColumn ("Profile Normal")ActiveCell.Offset(1, 0).Activate'Remove anything that isn't marked "1"Do    If ActiveCell.Value = 1 Then        ActiveCell.Offset(1, 0).Activate    Else        'If this will delete the subject entirely, record subject ID and reason for deletion.        If Not (ActiveCell.Offset(0, -3).Value = ActiveCell.Offset(-1, -3).Value) And Not (ActiveCell.Offset(0, -3).Value = ActiveCell.Offset(1, -3).Value) Then        'If Not (ActiveCell.Offset(0, -3).Value = ActiveCell.Offset(-1, -3).Value) Then            LostSubjectCounter = LostSubjectCounter + 1            LostSubjects(LostSubjectCounter) = ActiveCell.Offset(0, -3).Value            LostSubjectReason(LostSubjectCounter) = ActiveCell.Value            If LostSubjectReason(LostSubjectCounter) = "0" Then LostSubjectReason(LostSubjectCounter) = "No good trials - Device"        End If                'Actually delete the row, now        Rows(ActiveCell.Row & ":" & ActiveCell.Row).Delete Shift:=xlUp    End IfLoop Until IsEmpty(ActiveCell.Value)'If any subjects were lost, record information in text fileIf LostSubjectCounter > 0 ThenLostSubjectFile = "C:\Users\Minna\Desktop\Pupillometry Consulting\Output Files rd2\LostSubjectRecord.txt"iFileNum = FreeFileOpen LostSubjectFile For Output As iFileNumPrint #iFileNum, "The following subjects were removed completely"Print #iFileNum, ""For i = 1 To LostSubjectCounter'If LostSubjectReason(i) = "0" Then LostSubjectReason(i) = "No good trials"DisplayString = LostSubjects(i) & " - " & LostSubjectReason(i) & vbNewLine & DisplayStringPrint #iFileNum, LostSubjects(i) & " - " & LostSubjectReason(i)Next iClose #iFileNum'LostSubjectFile = "C:\Users\Minna\Desktop\Pupillometry Consulting\Output Files rd2\LostSubjectRecord.txt"'iFileNum = FreeFile'Open LostSubjectFile For Output As iFileNum'Print #iFileNum, DisplayStringMsgBox ("The following subjects were removed completely" & vbNewLine & vbNewLine & DisplayString)End IfEnd SubSub AveragePLRData()Dim NewSubject As BooleanDim FirstRow, LastRow As StringDim FirstCell, LastCell As StringDim NumberOfRows As StringDim FirstColumnToAverage As StringDim CellValue As String''''''''''''''''''''''''''''''''''''Average data for remaining trials'''''''''''''''''''''''''''''''''''''Create column for storing Number of Trial informationColumns("E:E").Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAboveRange("E1") = "Number of Trials in Average"'Find the first column that needs averagingRows("1:1").SelectFirstColumnToAverage = GetColumnLetter("Diameter Init")'Find the last populated columnRange(FirstColumnToAverage & "1").ActivateDo    ActiveCell.Offset(0, 1).ActivateLoop Until IsEmpty(ActiveCell.Offset(0, 1).Value)CellValue = ActiveCell.ValueRows("1:1").Select'LastColumnToAverage = Left(ActiveCell.Address(False, False), 1 + -1 * (ActiveCell.Column > 26))LastColumnToAverage = GetColumnLetter(CellValue)NewSubject = FalseRange("A2").ActivateDoNumberOfRows = 0'Find first row for subjectFirstRow = ActiveCell.Row'Find last row for subjectDoLastRow = ActiveCell.RowNumberOfRows = NumberOfRows + 1ActiveCell.Offset(1, 0).ActivateLoop While ActiveCell.Value = ActiveCell.Offset(-1, 0).Value'Assign Number of rowsRange("E" & FirstRow) = NumberOfRows'If multiple rows, average rows together.  Otherwise, skip to next subject.If Not NumberOfRows = 1 Then    'Create new row to house averaged values    Rows(FirstRow & ":" & FirstRow).Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove        'Go to first average-column    Range(FirstColumnToAverage & FirstRow).Activate    'Set to average of subject's values below    ActiveCell.FormulaR1C1 = "=AVERAGE(R[1]C:R[" & NumberOfRows & "]C)"    'Copy this formula into every column that needs averaging    ActiveCell.Copy    Range(FirstColumnToAverage & FirstRow & ":" & LastColumnToAverage & FirstRow).Select    ActiveSheet.Paste    Application.CutCopyMode = False        'Copy the values of this row into the subject's first row, and delete row.    Range(FirstColumnToAverage & FirstRow & ":" & LastColumnToAverage & FirstRow).Copy    Range(FirstColumnToAverage & FirstRow + 1).Select    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _        :=False, Transpose:=False    Application.CutCopyMode = False    Rows(FirstRow & ":" & FirstRow).Delete Shift:=xlUp    'Delete everything but the first row    Rows(FirstRow + 1 & ":" & LastRow).Delete Shift:=xlUp    'Return to Column A, at the beginning of the next subject    Range("A" & FirstRow).Offset(1, 0).ActivateEnd IfLoop Until IsEmpty(ActiveCell.Value)End SubFunction Mean(StartCell As String, EndCell As String)     Mean = WorksheetFunction.Average(Range(StartCell & ":" & EndCell))    End FunctionFunction TwoDigitsAfterDecimal(NumberString As String)' Position of .intpos = InStr(1, NumberString, ".")If intpos > 0 Then    ' . found, take two chars after .    TwoDigitsAfterDecimal = Left(NumberString, intpos + 2)Else    ' . not found, take whole string    TwoDigitsAfterDecimal = NumberStringEnd IfEnd FunctionPrivate Sub CreatePCA()Dim LastRow As StringDim NewColumn As String'Find Diameter End VariableRows("1:1").SelectNewColumn = GetColumnLetter("Percent Change")'Find/assign last populated row    Range("A2").End(xlDown).Activate    LastRow = ActiveCell.Row'Create PCA (diameter end - diameter initial)    Columns(NewColumn & ":" & NewColumn).Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove    Range(NewColumn & "1") = "PCA"    Range(NewColumn & "2") = "=RC[-1]-RC[-2]"    Range(NewColumn & "2").AutoFill Destination:=Range(NewColumn & "2:" & NewColumn & LastRow), Type:=xlFillDefault    Range("A1").Select'Copy and repaste as value, so future steps won't alter it    Range(NewColumn & "2:" & NewColumn & LastRow).Copy    Range(NewColumn & "2").Select    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _        :=False, Transpose:=False    Application.CutCopyMode = FalseEnd SubPrivate Sub RenameWaveformVarsPLR()Dim OldVarName As StringDim NewVarName As String'Go to beginning of pupil dataRows("1:1").SelectGotoColumn ("0")'Rename all waveform variablesDoOldVarName = ActiveCell.ValueNewVarName = "LRWF" & TwoDigitsAfterDecimal(OldVarName)ActiveCell = NewVarNameActiveCell.Offset(0, 1).ActivateLoop Until IsEmpty(ActiveCell.Value)End SubFunction GetColumnLetter(SearchString As String)Selection.Find(What:=SearchString, After:=ActiveCell, LookIn:=xlValues, _    LookAt:=xlPart, SearchOrder:=xlByColumns, SearchDirection:=xlNext, _    MatchCase:=False, SearchFormat:=False).ActivateGetColumnLetter = Left(ActiveCell.Address(False, False), 1 + -1 * (ActiveCell.Column > 26))End FunctionFunction GotoColumn(SearchString As String)Selection.Find(What:=SearchString, After:=ActiveCell, LookIn:=xlValues, _    LookAt:=xlPart, SearchOrder:=xlByColumns, SearchDirection:=xlNext, _    MatchCase:=False, SearchFormat:=False).ActivateEnd FunctionPublic Sub RemoveColumn(ColumnName As String)Dim ColumnLetter As StringColumnLetter = GetColumnLetter(ColumnName)Columns(ColumnLetter & ":" & ColumnLetter).Delete Shift:=xlToLeftEnd SubSub RemoveColumns_PLR()Rows("1:1").SelectCall RemoveColumn("Good or Bad Scan?")Call RemoveColumn("Profile Normal")Call RemoveColumn("Record ID")Call RemoveColumn("Pulse Intensity")Call RemoveColumn("DC Intensity")Call RemoveColumn("Pulse Start Time")Call RemoveColumn("Pulse Duration")Call RemoveColumn("Measurement Duration")Range("A1").SelectEnd Sub